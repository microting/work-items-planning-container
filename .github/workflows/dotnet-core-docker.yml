name: .NET Docker

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [a,b,c,d,e,f,g,h]
    steps:
    - uses: actions/checkout@v2
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable

        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306
        container port: 3306
        character set server: 'utf8'
        collation server: 'utf8_general_ci'
        mariadb version: '10.4.10'
        mysql database: 'some_test'
        mysql root password: 'secretpassword'
        mysql user: 'developer'
        mysql password: 'passwordtoo'
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.2-management-alpine'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: Install dependencies
      run: dotnet restore eform-angular-frontend/eFormAPI/eFormAPI.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-frontend/eFormAPI/eFormAPI.Web.Tests/eFormAPI.Web.Tests.csproj
    - name: Integration Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-frontend/eFormAPI/eFormAPI.Web.Integration.Tests/eFormAPI.Web.Integration.Tests.csproj
    - name: NPM Install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: testheadless2${{matrix.test}}
      run: cd eform-angular-frontend/eform-client && npm run testheadless2${{matrix.test}}
  items-planning-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing items planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-items-planning-plugin
        ref: stable
        path: eform-angular-items-planning-plugin
    - name: Install dependencies
      run: dotnet restore eform-angular-items-planning-plugin/eFormAPI/Plugins/ItemsPlanning.Pn/ItemsPlanning.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-items-planning-plugin/eFormAPI/Plugins/ItemsPlanning.Pn/ItemsPlanning.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-items-planning-plugin/eFormAPI/Plugins/ItemsPlanning.Pn/ItemsPlanning.Pn.Test/ItemsPlanning.Pn.Test.csproj
    - name: Copy dependencies
      run: |
        cp -av eform-angular-items-planning-plugin/eform-client/src/app/plugins/modules/items-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/items-planning-pn
        cp -av eform-angular-items-planning-plugin/eform-client/e2e/Tests/items-planning-settings eform-angular-frontend/eform-client/e2e/Tests/items-planning-settings
        cp -av eform-angular-items-planning-plugin/eform-client/e2e/Tests/items-planning-general eform-angular-frontend/eform-client/e2e/Tests/items-planning-general
        cp -av eform-angular-items-planning-plugin/eform-client/e2e/Page\ objects/ItemsPlanning eform-angular-frontend/eform-client/e2e/Page\ objects/ItemsPlanning
        cp -av eform-angular-items-planning-plugin/eform-client/e2e/Assets eform-angular-frontend/eform-client/e2e/Assets
        cp -av eform-angular-items-planning-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-angular-items-planning-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-items-planning-plugin/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning
        cd eform-angular-frontend/eform-client && ../../eform-angular-items-planning-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
  greate-belt-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing items planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-greate-belt-plugin
        ref: stable
        path: eform-angular-greate-belt-plugin
    - name: Install dependencies
      run: dotnet restore eform-angular-greate-belt-plugin/eFormAPI/Plugins/GreateBelt.Pn/GreateBelt.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-greate-belt-plugin/eFormAPI/Plugins/GreateBelt.Pn/GreateBelt.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-greate-belt-plugin/eFormAPI/Plugins/GreateBelt.Pn/GreateBelt.Pn.Test/GreateBelt.Pn.Test.csproj
    - name: Copy dependencies
      run: |
        cp -av eform-angular-greate-belt-plugin/eform-client/src/app/plugins/modules/greate-belt-pn eform-angular-frontend/eform-client/src/app/plugins/modules/greate-belt-pn
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-greate-belt-plugin/eFormAPI/eFormAPI.Web/Plugins/GreateBelt.Pn eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/GreateBelt.Pn
        cd eform-angular-frontend/eform-client && ../../eform-angular-greate-belt-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: The job has failed
      if: always()
      run: |
        cat dotnet_log
        cat eform-angular-frontend/eform-client/npm_log
  workflow-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing workflow checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-workflow-plugin
        ref: stable
        path: eform-angular-workflow-plugin
    - name: Install dependencies
      run: dotnet restore eform-angular-workflow-plugin/eFormAPI/Plugins/Workflow.Pn/Workflow.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-workflow-plugin/eFormAPI/Plugins/Workflow.Pn/Workflow.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-workflow-plugin/eFormAPI/Plugins/Workflow.Pn/Workflow.Pn.Test/Workflow.Pn.Test.csproj
    - name: Sleep 15 seconds
      run: sleep 15
    - name: Load DB dump
      run: |
        mysql -u root -h 127.0.0.1 --password=secretpassword -e 'create database `420_eform-angular-workflow-plugin`'
        mysql -u root -h 127.0.0.1 --password=secretpassword 420_eform-angular-workflow-plugin < eform-angular-workflow-plugin/420_eform-angular-workflow-plugin.sql
    - name: Copy dependencies
      run: |
        cp -av eform-angular-workflow-plugin/eform-client/src/app/plugins/modules/workflow-pn eform-angular-frontend/eform-client/src/app/plugins/modules/workflow-pn
        cp -av eform-angular-workflow-plugin/eform-client/e2e/Tests/workflow-settings eform-angular-frontend/eform-client/e2e/Tests/workflow-settings
        cp -av eform-angular-workflow-plugin/eform-client/e2e/Tests/workflow-general eform-angular-frontend/eform-client/e2e/Tests/workflow-general
        cp -av eform-angular-workflow-plugin/eform-client/e2e/Page\ objects/Workflow eform-angular-frontend/eform-client/e2e/Page\ objects/Workflow
        cp -av eform-angular-workflow-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-angular-workflow-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-workflow-plugin/eFormAPI/eFormAPI.Web/Plugins/Workflow eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/Workflow
        cd eform-angular-frontend/eform-client && ../../eform-angular-workflow-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
    - name: The job has failed
      if: ${{ failure() }}
      run: |
        cat dotnet_log
        cat eform-angular-frontend/eform-client/npm_log
        mysql -u root --password=secretpassword -e "show databases" -h localhost
  work-order-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing work order checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-work-orders-plugin
        ref: stable
        path: eform-angular-work-orders-plugin
    - name: Install dependencies
      run: dotnet restore eform-angular-work-orders-plugin/eFormAPI/Plugins/WorkOrders.Pn/WorkOrders.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-work-orders-plugin/eFormAPI/Plugins/WorkOrders.Pn/WorkOrders.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-work-orders-plugin/eFormAPI/Plugins/WorkOrders.Pn/WorkOrders.Pn.Test/WorkOrders.Pn.Test.csproj
    - name: Sleep 15
      run: sleep 15
    - name: Load DB dump
      run: |
        mysql -u root -h 127.0.0.1 --password=secretpassword -e 'create database `420_eform-angular-work-orders-plugin`'
        mysql -u root -h 127.0.0.1 --password=secretpassword -e 'create database `420_SDK`'
        mysql -u root -h 127.0.0.1 --password=secretpassword 420_eform-angular-work-orders-plugin < eform-angular-work-orders-plugin/420_eform-angular-work-orders-plugin.sql
        mysql -u root -h 127.0.0.1 --password=secretpassword 420_SDK < eform-angular-work-orders-plugin/420_SDK.sql
    - name: Copy dependencies
      run: |
        cp -av eform-angular-work-orders-plugin/eform-client/src/app/plugins/modules/workorders-pn eform-angular-frontend/eform-client/src/app/plugins/modules/workorders-pn
        cp -av eform-angular-work-orders-plugin/eform-client/e2e/Tests/workorders-settings eform-angular-frontend/eform-client/e2e/Tests/workorders-settings
        cp -av eform-angular-work-orders-plugin/eform-client/e2e/Tests/workorders-general eform-angular-frontend/eform-client/e2e/Tests/workorders-general
        cp -av eform-angular-work-orders-plugin/eform-client/e2e/Page\ objects/WorkOrders eform-angular-frontend/eform-client/e2e/Page\ objects/WorkOrders
        cp -av eform-angular-work-orders-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-angular-work-orders-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-work-orders-plugin/eFormAPI/eFormAPI.Web/Plugins/WorkOrders eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/WorkOrders
        cd eform-angular-frontend/eform-client && ../../eform-angular-work-orders-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln > dotnet_log 2>&1 &
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
  backend-pn-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing work order checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-backendconfiguration-plugin
        ref: stable
        path: eform-backendconfiguration-plugin
    - name: 'Preparing ItemsPlanning checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-items-planning-plugin
        ref: ${{ steps.extract_branch.outputs.branch }}
        path: eform-angular-items-planning-plugin
    - name: Install dependencies
      run: dotnet restore eform-backendconfiguration-plugin/eFormAPI/Plugins/BackendConfiguration.Pn/BackendConfiguration.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-backendconfiguration-plugin/eFormAPI/Plugins/BackendConfiguration.Pn/BackendConfiguration.Pn.sln
    - name: Build ItemsPlanning
      run: dotnet build eform-angular-items-planning-plugin/eFormAPI/Plugins/ItemsPlanning.Pn/ItemsPlanning.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-backendconfiguration-plugin/eFormAPI/Plugins/BackendConfiguration.Pn/BackendConfiguration.Pn.Test/BackendConfiguration.Pn.Test.csproj
    - name: Sleep 15
      run: sleep 15
    - name: Copy dependencies
      run: |
        cp -av eform-angular-items-planning-plugin/eform-client/src/app/plugins/modules/items-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/items-planning-pn
        cp -av eform-backendconfiguration-plugin/eform-client/src/app/plugins/modules/backend-configuration-pn eform-angular-frontend/eform-client/src/app/plugins/modules/backend-configuration-pn
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Tests/backend-configuration-settings eform-angular-frontend/eform-client/e2e/Tests/backend-configuration-settings
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Tests/backend-configuration-general eform-angular-frontend/eform-client/e2e/Tests/backend-configuration-general
        cp -av eform-backendconfiguration-plugin/eform-client/e2e/Page\ objects/BackendConfiguration eform-angular-frontend/eform-client/e2e/Page\ objects/BackendConfiguration
        cp -av eform-angular-items-planning-plugin/eform-client/e2e/Page\ objects/ItemsPlanning eform-angular-frontend/eform-client/e2e/Page\ objects/ItemsPlanning
        cp -av eform-backendconfiguration-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-backendconfiguration-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-items-planning-plugin/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/ItemsPlanning
        cp -av eform-backendconfiguration-plugin/eFormAPI/eFormAPI.Web/Plugins/BackendConfiguration.Pn eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/BackendConfiguration.Pn
        cd eform-angular-frontend/eform-client && ../../eform-backendconfiguration-plugin/testinginstallpn.sh
        ../../eform-angular-items-planning-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln > dotnet_log 2>&1 &
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
  timeplanning-pn-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: eform-angular-timeplanning-plugin
    - name: Upgrade Chrome browser
      run: |
        sudo apt-get update
        sudo apt-get --only-upgrade install google-chrome-stable
        google-chrome --version
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.16.1'
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing Time Planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-timeplanning-plugin
        ref: stable
        path: eform-angular-timeplanning-plugin
    - name: Install dependencies
      run: dotnet restore eform-angular-timeplanning-plugin/eFormAPI/Plugins/TimePlanning.Pn/TimePlanning.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-timeplanning-plugin/eFormAPI/Plugins/TimePlanning.Pn/TimePlanning.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-timeplanning-plugin/eFormAPI/Plugins/TimePlanning.Pn/TimePlanning.Pn.Test/TimePlanning.Pn.Test.csproj
    - name: Sleep 15
      run: sleep 15
    - name: Copy dependencies
      run: |
        cp -av eform-angular-timeplanning-plugin/eform-client/src/app/plugins/modules/time-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/time-planning-pn
        cp -av eform-angular-timeplanning-plugin/eform-client/e2e/Tests/time-planning-settings eform-angular-frontend/eform-client/e2e/Tests/time-planning-settings
        cp -av eform-angular-timeplanning-plugin/eform-client/e2e/Tests/time-planning-general eform-angular-frontend/eform-client/e2e/Tests/time-planning-general
        cp -av eform-angular-timeplanning-plugin/eform-client/e2e/Page\ objects/TimePlanning eform-angular-frontend/eform-client/e2e/Page\ objects/TimePlanning
        cp -av eform-angular-timeplanning-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-angular-timeplanning-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-timeplanning-plugin/eFormAPI/eFormAPI.Web/Plugins/TimePlanning.Pn eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/TimePlanning.Pn
        cd eform-angular-frontend/eform-client && ../../eform-angular-timeplanning-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln > dotnet_log 2>&1 &
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
  service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing debian-service checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-debian-service
        ref: stable
        path: eform-debian-service
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-debian-service
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-debian-service
    - name: Test
      run: dotnet test --no-restore --verbosity normal eform-debian-service
  timeplanning-service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing eform-service-timeplanning-plugin checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-timeplanning-plugin
        ref: stable
        path: eform-service-timeplanning-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-service-timeplanning-plugin
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-service-timeplanning-plugin
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-service-timeplanning-plugin/ServiceTimePlanningPlugin.Integration.Test/ServiceTimePlanningPlugin.Integration.Test.csproj
  work-order-service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing eform-service-workorder-plugin checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-workorder-plugin
        ref: stable
        path: eform-service-workorder-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-service-workorder-plugin
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-service-workorder-plugin
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-service-workorder-plugin/ServiceWorkOrdersPlugin.Integration.Test/ServiceWorkOrdersPlugin.Integration.Test.csproj
  items-planning-service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing eform-service-items-planning-plugin checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-items-planning-plugin
        ref: stable
        path: eform-service-items-planning-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-service-items-planning-plugin
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-service-items-planning-plugin
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-service-items-planning-plugin/ServiceItemsPlanningPlugin.Integration.Test/ServiceItemsPlanningPlugin.Integration.Test.csproj
  workflow-service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing eform-service-workorder-plugin checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-workflow-plugin
        ref: stable
        path: eform-service-workflow-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-service-workflow-plugin
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-service-workflow-plugin
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-service-workflow-plugin/ServiceWorkflowPlugin.Integration.Test/ServiceWorkflowPlugin.Integration.Test.csproj
  backend-configuration-service-build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Preparing eform-service-backendconfiguration-plugin checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-backendconfiguration-plugin
        ref: stable
        path: eform-service-backendconfiguration-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.9-management'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install dependencies
      run: dotnet restore eform-service-backendconfiguration-plugin
    - name: Build
      run: dotnet build --configuration Release --no-restore eform-service-backendconfiguration-plugin
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-service-backendconfiguration-plugin/ServiceBackendConfigurationPlugin.Integration.Test/ServiceBackendConfigurationPlugin.Integration.Test.csproj
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-frontend
        ref: stable
        path: eform-angular-frontend
    - name: 'Preparing items planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-items-planning-plugin
        ref: stable
        path: eform-angular-items-planning-plugin
    - name: 'Preparing work order checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-work-orders-plugin
        ref: stable
        path: eform-angular-work-orders-plugin
    - name: 'Preparing workflow checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-workflow-plugin
        ref: stable
        path: eform-angular-workflow-plugin
    - name: 'Preparing backend configuration checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-backendconfiguration-plugin
        ref: stable
        path: eform-backendconfiguration-plugin
    - name: 'Preparing time planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-timeplanning-plugin
        ref: stable
        path: eform-angular-timeplanning-plugin
    - name: 'Preparing greate belt checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-angular-greate-belt-plugin
        ref: stable
        path: eform-angular-greate-belt-plugin
    - name: Copy dependencies
      run: |
        cp -av eform-angular-work-orders-plugin/eform-client/src/app/plugins/modules/workorders-pn eform-angular-frontend/eform-client/src/app/plugins/modules/workorders-pn
        cp -av eform-angular-workflow-plugin/eform-client/src/app/plugins/modules/workflow-pn eform-angular-frontend/eform-client/src/app/plugins/modules/workflow-pn
        cp -av eform-angular-items-planning-plugin/eform-client/src/app/plugins/modules/items-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/items-planning-pn
        cp -av eform-angular-timeplanning-plugin/eform-client/src/app/plugins/modules/time-planning-pn eform-angular-frontend/eform-client/src/app/plugins/modules/time-planning-pn
        cp -av eform-angular-greate-belt-plugin/eform-client/src/app/plugins/modules/greate-belt-pn eform-angular-frontend/eform-client/src/app/plugins/modules/greate-belt-pn
        cp -av eform-backendconfiguration-plugin/eform-client/src/app/plugins/modules/backend-configuration-pn eform-angular-frontend/eform-client/src/app/plugins/modules/backend-configuration-pn
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cd eform-angular-frontend/eform-client && ../../eform-angular-items-planning-plugin/testinginstallpn.sh
        ../../eform-angular-work-orders-plugin/testinginstallpn.sh
        ../../eform-angular-workflow-plugin/testinginstallpn.sh
        ../../eform-angular-timeplanning-plugin/testinginstallpn.sh
        ../../eform-backendconfiguration-plugin/testinginstallpn.sh
        ../../eform-angular-greate-belt-plugin/testinginstallpn.sh
    - name: Get the version release
      id: get_release_version
      run: echo ::set-output name=VERSION::$(cd main && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(cd eform-angular-items-planning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the work order version
      id: get_plugin_version
      run: echo ::set-output name=PLUGIN2VERSION::$(cd eform-angular-work-orders-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the work order version
      id: get_plugin3_version
      run: echo ::set-output name=PLUGIN3VERSION::$(cd eform-angular-workflow-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the work order version
      id: get_plugin4_version
      run: echo ::set-output name=PLUGIN4VERSION::$(cd eform-backendconfiguration-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the time planning version
      id: get_plugin5_version
      run: echo ::set-output name=PLUGIN5VERSION::$(cd eform-angular-timeplanning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the greate belt version
      id: get_plugin6_version
      run: echo ::set-output name=PLUGIN6VERSION::$(cd eform-angular-greate-belt-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the frontend version
      id: get_frontend_version
      run: echo ::set-output name=FRONTENDVERSION::$(cd eform-angular-frontend && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Copy frontendfiles
      run: cp main/Dockerfile .
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: registry.microting.com
        username: renemadsen
        password: zd8237EA
    - name: Build the tagged Docker image
      run: docker build . -t microtingas/work-items-planning-container:latest -t microtingas/work-items-planning-container:${{ steps.get_release_version.outputs.VERSION }} --build-arg GITVERSION=${{ steps.get_frontend_version.outputs.FRONTENDVERSION }} --build-arg PLUGINVERSION=${{ steps.get_version.outputs.VERSION }} --build-arg PLUGIN2VERSION=${{ steps.get_plugin_version.outputs.PLUGIN2VERSION }} --build-arg PLUGIN3VERSION=${{ steps.get_plugin3_version.outputs.PLUGIN3VERSION }} --build-arg PLUGIN4VERSION=${{ steps.get_plugin4_version.outputs.PLUGIN4VERSION }} --build-arg PLUGIN5VERSION=${{ steps.get_plugin5_version.outputs.PLUGIN5VERSION }} --build-arg PLUGIN6VERSION=${{ steps.get_plugin6_version.outputs.PLUGIN6VERSION }}
    - name: Tag builds
      run: |-
        docker tag microtingas/work-items-planning-container:latest registry.microting.com/microtingas/work-items-planning-container:latest
        docker tag microtingas/work-items-planning-container:${{ steps.get_release_version.outputs.VERSION }} registry.microting.com/microtingas/work-items-planning-container:${{ steps.get_release_version.outputs.VERSION }}
    - name: Push the tagged Docker image
      run: docker push registry.microting.com/microtingas/work-items-planning-container:${{ steps.get_release_version.outputs.VERSION }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  deploy-service:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: main
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-debian-service
        ref: stable
        path: eform-debian-service
    - name: 'Preparing items planning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-items-planning-plugin
        ref: stable
        path: eform-service-items-planning-plugin
    - name: 'Preparing work order checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-workorder-plugin
        ref: stable
        path: eform-service-workorder-plugin
    - name: 'Preparing workflow checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-workflow-plugin
        ref: stable
        path: eform-service-workflow-plugin
    - name: 'Preparing TimePlanning checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-timeplanning-plugin
        ref: stable
        path: eform-service-timeplanning-plugin
    - name: 'Preparing BackendConfiguration checkout'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: microting/eform-service-backendconfiguration-plugin
        ref: stable
        path: eform-service-timeplanning-plugin
    - name: Get the version release
      id: get_release_version
      run: echo ::set-output name=VERSION::$(cd main && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(cd eform-service-items-planning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the work order version
      id: get_plugin_version
      run: echo ::set-output name=PLUGIN2VERSION::$(cd eform-service-workorder-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the workflow version
      id: get_plugin3_version
      run: echo ::set-output name=PLUGIN3VERSION::$(cd eform-service-workflow-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the TimePlanning version
      id: get_plugin4_version
      run: echo ::set-output name=PLUGIN4VERSION::$(cd eform-service-timeplanning-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the Backend Configuration version
      id: get_plugin5_version
      run: echo ::set-output name=PLUGIN5VERSION::$(cd eform-service-backendconfiguration-plugin && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Get the service version
      id: get_service_version
      run: echo ::set-output name=FRONTENDVERSION::$(cd eform-debian-service && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Copy Docker file
      run: cp main/Dockerfile-service Dockerfile
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: registry.microting.com
        username: renemadsen
        password: zd8237EA
    - name: Build the tagged Docker image
      run: docker build . -t microtingas/work-items-planning-service-container:latest -t microtingas/work-items-planning-service-container:${{ steps.get_release_version.outputs.VERSION }} --build-arg GITVERSION=${{ steps.get_service_version.outputs.FRONTENDVERSION }} --build-arg PLUGINVERSION=${{ steps.get_version.outputs.VERSION }} --build-arg PLUGIN2VERSION=${{ steps.get_plugin_version.outputs.PLUGIN2VERSION }} --build-arg PLUGIN3VERSION=${{ steps.get_plugin3_version.outputs.PLUGIN3VERSION }} --build-arg PLUGIN4VERSION=${{ steps.get_plugin4_version.outputs.PLUGIN4VERSION }} --build-arg PLUGIN5VERSION=${{ steps.get_plugin5_version.outputs.PLUGIN5VERSION }}
    - name: Tag builds
      run: |-
        docker tag microtingas/work-items-planning-service-container:latest registry.microting.com/microtingas/work-items-planning-service-container:latest
        docker tag microtingas/work-items-planning-service-container:${{ steps.get_release_version.outputs.VERSION }} registry.microting.com/microtingas/work-items-planning-service-container:${{ steps.get_release_version.outputs.VERSION }}
    - name: Push the tagged Docker image
      run: docker push registry.microting.com/microtingas/work-items-planning-service-container:${{ steps.get_release_version.outputs.VERSION }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
